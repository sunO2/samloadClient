/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package samsung-firmware-tool/pkg/firmwarelib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "firmwarelib.go"


#include <stdlib.h> // For C.free
#include <stdbool.h> // For bool

// Dart C API declarations (from dart_api.h)
// This is a simplified but more complete version for CGO.
typedef int64_t Dart_Port;

typedef enum {
  Dart_CObject_kNull = 0,
  Dart_CObject_kBool,
  Dart_CObject_kInt32,
  Dart_CObject_kInt64, // Value 3
  Dart_CObject_kDouble,
  Dart_CObject_kString,
  Dart_CObject_kArray, // Value 6
  Dart_CObject_kTypedData,
  Dart_CObject_kExternalTypedData,
  Dart_CObject_kSendPort,
  Dart_CObject_kCapability,
  Dart_CObject_kNativePointer,
  Dart_CObject_kUnsupported,
  Dart_CObject_kNumberOfTypes
} Dart_CObject_Type;

typedef struct _Dart_CObject {
  Dart_CObject_Type type;
  union {
    bool as_bool;
    int32_t as_int32;
    int64_t as_int64;
    double as_double;
    char* as_string;
    struct {
      intptr_t length;
      struct _Dart_CObject** values;
    } as_array;
    struct {
      Dart_Port id;
      Dart_Port origin_id;
    } as_send_port;
    void* as_native_pointer;
  } value;
} Dart_CObject;

typedef bool (*Dart_PostCObject_Type)(Dart_Port port, Dart_CObject* message);

// A C struct to hold the Dart callback information
typedef struct {
    Dart_Port send_port_id;
    Dart_PostCObject_Type post_c_object_fn;
} Dart_Callback_Handle;

// A C function to post a message to Dart using the provided handle
// type: 0 for progress update
static void post_dart_message_from_c(Dart_Callback_Handle* handle, int type, long current, long max, long bps) {
    if (handle == NULL || handle->post_c_object_fn == NULL || handle->send_port_id == 0) {
        return; // Callback handle not initialized or SendPort not set
    }

    // Allocate Dart_CObject for the array and its elements
    Dart_CObject* message = (Dart_CObject*)malloc(sizeof(Dart_CObject));
    if (message == NULL) return; // Handle allocation failure
    message->type = Dart_CObject_kArray; // Should be 6
    message->value.as_array.length = 4;
    message->value.as_array.values = (Dart_CObject**)malloc(sizeof(Dart_CObject*) * 4);
    if (message->value.as_array.values == NULL) {
        free(message);
        return; // Handle allocation failure
    }

    Dart_CObject* type_obj = (Dart_CObject*)malloc(sizeof(Dart_CObject));
    if (type_obj == NULL) goto cleanup_array_values;
    type_obj->type = Dart_CObject_kInt64; // Should be 3
    type_obj->value.as_int64 = type;
    message->value.as_array.values[0] = type_obj;

    Dart_CObject* current_obj = (Dart_CObject*)malloc(sizeof(Dart_CObject));
    if (current_obj == NULL) goto cleanup_array_values;
    current_obj->type = Dart_CObject_kInt64; // Should be 3
    current_obj->value.as_int64 = current;
    message->value.as_array.values[1] = current_obj;

    Dart_CObject* max_obj = (Dart_CObject*)malloc(sizeof(Dart_CObject));
    if (max_obj == NULL) goto cleanup_array_values;
    max_obj->type = Dart_CObject_kInt64; // Should be 3
    max_obj->value.as_int64 = max;
    message->value.as_array.values[2] = max_obj;

    Dart_CObject* bps_obj = (Dart_CObject*)malloc(sizeof(Dart_CObject));
    if (bps_obj == NULL) goto cleanup_array_values;
    bps_obj->type = Dart_CObject_kInt64; // Should be 3
    bps_obj->value.as_int64 = bps;
    message->value.as_array.values[3] = bps_obj;

    handle->post_c_object_fn(handle->send_port_id, message);

cleanup_array_values:
    // Free the allocated memory for the array values and the message itself
    for (int i = 0; i < message->value.as_array.length; ++i) {
        if (message->value.as_array.values[i] != NULL) {
            free(message->value.as_array.values[i]);
        }
    }
    free(message->value.as_array.values);
    free(message);
}

// A C function to call the Go-provided C callback
typedef void (*progressCallback)(long current, long max, long bps);

static inline void callProgressCallback(progressCallback cb, long current, long max, long bps) {
    if (cb != NULL) {
        cb(current, max, bps);
    }
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern Dart_Callback_Handle* NewDartCallbackHandle(long long int sendPortID, void* postCObjectPtr);
extern void FreeDartCallbackHandle(Dart_Callback_Handle* handle);
extern char* CheckFirmwareVersion(char* modelC, char* regionC);
extern char* DownloadFirmware(char* modelC, char* regionC, char* fwVersionC, char* imeiSerialC, char* outputPathC, Dart_Callback_Handle* callbackHandle);
extern char* DecryptFirmware(char* inputPathC, char* outputPathC, char* fwVersionC, char* modelC, char* regionC, char* imeiSerialC, Dart_Callback_Handle* callbackHandle);

// FreeString is a C-callable function to free memory allocated by C.CString
// This is important to prevent memory leaks when C code calls Go functions
// that return C strings.
//
extern void FreeString(char* ptr);

#ifdef __cplusplus
}
#endif
